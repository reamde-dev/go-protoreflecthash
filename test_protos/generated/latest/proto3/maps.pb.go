// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.7
// source: test_protos/schema/proto3/maps.proto

package proto3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BoolMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolToBool       map[bool]bool        `protobuf:"bytes,1,rep,name=bool_to_bool,json=boolToBool,proto3" json:"bool_to_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BoolToBytes      map[bool][]byte      `protobuf:"bytes,2,rep,name=bool_to_bytes,json=boolToBytes,proto3" json:"bool_to_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolToDouble     map[bool]float64     `protobuf:"bytes,3,rep,name=bool_to_double,json=boolToDouble,proto3" json:"bool_to_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BoolToFixed32    map[bool]uint32      `protobuf:"bytes,4,rep,name=bool_to_fixed32,json=boolToFixed32,proto3" json:"bool_to_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	BoolToFixed64    map[bool]uint64      `protobuf:"bytes,5,rep,name=bool_to_fixed64,json=boolToFixed64,proto3" json:"bool_to_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BoolToFloat      map[bool]float32     `protobuf:"bytes,6,rep,name=bool_to_float,json=boolToFloat,proto3" json:"bool_to_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	BoolToInt32      map[bool]int32       `protobuf:"bytes,7,rep,name=bool_to_int32,json=boolToInt32,proto3" json:"bool_to_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BoolToInt64      map[bool]int64       `protobuf:"bytes,8,rep,name=bool_to_int64,json=boolToInt64,proto3" json:"bool_to_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BoolToSfixed32   map[bool]int32       `protobuf:"bytes,9,rep,name=bool_to_sfixed32,json=boolToSfixed32,proto3" json:"bool_to_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	BoolToSfixed64   map[bool]int64       `protobuf:"bytes,10,rep,name=bool_to_sfixed64,json=boolToSfixed64,proto3" json:"bool_to_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BoolToSint32     map[bool]int32       `protobuf:"bytes,11,rep,name=bool_to_sint32,json=boolToSint32,proto3" json:"bool_to_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	BoolToSint64     map[bool]int64       `protobuf:"bytes,12,rep,name=bool_to_sint64,json=boolToSint64,proto3" json:"bool_to_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	BoolToString     map[bool]string      `protobuf:"bytes,13,rep,name=bool_to_string,json=boolToString,proto3" json:"bool_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolToUint32     map[bool]uint32      `protobuf:"bytes,14,rep,name=bool_to_uint32,json=boolToUint32,proto3" json:"bool_to_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BoolToUint64     map[bool]uint64      `protobuf:"bytes,15,rep,name=bool_to_uint64,json=boolToUint64,proto3" json:"bool_to_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BoolToPlanetV1   map[bool]PlanetV1    `protobuf:"bytes,16,rep,name=bool_to_planet_v1,json=boolToPlanetV1,proto3" json:"bool_to_planet_v1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=schema.proto3.PlanetV1"`
	BoolToSimple     map[bool]*Simple     `protobuf:"bytes,17,rep,name=bool_to_simple,json=boolToSimple,proto3" json:"bool_to_simple,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolToRepetitive map[bool]*Repetitive `protobuf:"bytes,18,rep,name=bool_to_repetitive,json=boolToRepetitive,proto3" json:"bool_to_repetitive,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolToSingleton  map[bool]*Singleton  `protobuf:"bytes,19,rep,name=bool_to_singleton,json=boolToSingleton,proto3" json:"bool_to_singleton,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BoolMaps) Reset() {
	*x = BoolMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_protos_schema_proto3_maps_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolMaps) ProtoMessage() {}

func (x *BoolMaps) ProtoReflect() protoreflect.Message {
	mi := &file_test_protos_schema_proto3_maps_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolMaps.ProtoReflect.Descriptor instead.
func (*BoolMaps) Descriptor() ([]byte, []int) {
	return file_test_protos_schema_proto3_maps_proto_rawDescGZIP(), []int{0}
}

func (x *BoolMaps) GetBoolToBool() map[bool]bool {
	if x != nil {
		return x.BoolToBool
	}
	return nil
}

func (x *BoolMaps) GetBoolToBytes() map[bool][]byte {
	if x != nil {
		return x.BoolToBytes
	}
	return nil
}

func (x *BoolMaps) GetBoolToDouble() map[bool]float64 {
	if x != nil {
		return x.BoolToDouble
	}
	return nil
}

func (x *BoolMaps) GetBoolToFixed32() map[bool]uint32 {
	if x != nil {
		return x.BoolToFixed32
	}
	return nil
}

func (x *BoolMaps) GetBoolToFixed64() map[bool]uint64 {
	if x != nil {
		return x.BoolToFixed64
	}
	return nil
}

func (x *BoolMaps) GetBoolToFloat() map[bool]float32 {
	if x != nil {
		return x.BoolToFloat
	}
	return nil
}

func (x *BoolMaps) GetBoolToInt32() map[bool]int32 {
	if x != nil {
		return x.BoolToInt32
	}
	return nil
}

func (x *BoolMaps) GetBoolToInt64() map[bool]int64 {
	if x != nil {
		return x.BoolToInt64
	}
	return nil
}

func (x *BoolMaps) GetBoolToSfixed32() map[bool]int32 {
	if x != nil {
		return x.BoolToSfixed32
	}
	return nil
}

func (x *BoolMaps) GetBoolToSfixed64() map[bool]int64 {
	if x != nil {
		return x.BoolToSfixed64
	}
	return nil
}

func (x *BoolMaps) GetBoolToSint32() map[bool]int32 {
	if x != nil {
		return x.BoolToSint32
	}
	return nil
}

func (x *BoolMaps) GetBoolToSint64() map[bool]int64 {
	if x != nil {
		return x.BoolToSint64
	}
	return nil
}

func (x *BoolMaps) GetBoolToString() map[bool]string {
	if x != nil {
		return x.BoolToString
	}
	return nil
}

func (x *BoolMaps) GetBoolToUint32() map[bool]uint32 {
	if x != nil {
		return x.BoolToUint32
	}
	return nil
}

func (x *BoolMaps) GetBoolToUint64() map[bool]uint64 {
	if x != nil {
		return x.BoolToUint64
	}
	return nil
}

func (x *BoolMaps) GetBoolToPlanetV1() map[bool]PlanetV1 {
	if x != nil {
		return x.BoolToPlanetV1
	}
	return nil
}

func (x *BoolMaps) GetBoolToSimple() map[bool]*Simple {
	if x != nil {
		return x.BoolToSimple
	}
	return nil
}

func (x *BoolMaps) GetBoolToRepetitive() map[bool]*Repetitive {
	if x != nil {
		return x.BoolToRepetitive
	}
	return nil
}

func (x *BoolMaps) GetBoolToSingleton() map[bool]*Singleton {
	if x != nil {
		return x.BoolToSingleton
	}
	return nil
}

type IntMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntToBool       map[int64]bool        `protobuf:"bytes,1,rep,name=int_to_bool,json=intToBool,proto3" json:"int_to_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IntToBytes      map[int64][]byte      `protobuf:"bytes,2,rep,name=int_to_bytes,json=intToBytes,proto3" json:"int_to_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntToDouble     map[int64]float64     `protobuf:"bytes,3,rep,name=int_to_double,json=intToDouble,proto3" json:"int_to_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	IntToFixed32    map[int64]uint32      `protobuf:"bytes,4,rep,name=int_to_fixed32,json=intToFixed32,proto3" json:"int_to_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	IntToFixed64    map[int64]uint64      `protobuf:"bytes,5,rep,name=int_to_fixed64,json=intToFixed64,proto3" json:"int_to_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	IntToFloat      map[int64]float32     `protobuf:"bytes,6,rep,name=int_to_float,json=intToFloat,proto3" json:"int_to_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	IntToInt32      map[int64]int32       `protobuf:"bytes,7,rep,name=int_to_int32,json=intToInt32,proto3" json:"int_to_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IntToInt64      map[int64]int64       `protobuf:"bytes,8,rep,name=int_to_int64,json=intToInt64,proto3" json:"int_to_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IntToSfixed32   map[int64]int32       `protobuf:"bytes,9,rep,name=int_to_sfixed32,json=intToSfixed32,proto3" json:"int_to_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	IntToSfixed64   map[int64]int64       `protobuf:"bytes,10,rep,name=int_to_sfixed64,json=intToSfixed64,proto3" json:"int_to_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	IntToSint32     map[int64]int32       `protobuf:"bytes,11,rep,name=int_to_sint32,json=intToSint32,proto3" json:"int_to_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	IntToSint64     map[int64]int64       `protobuf:"bytes,12,rep,name=int_to_sint64,json=intToSint64,proto3" json:"int_to_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	IntToString     map[int64]string      `protobuf:"bytes,13,rep,name=int_to_string,json=intToString,proto3" json:"int_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntToUint32     map[int64]uint32      `protobuf:"bytes,14,rep,name=int_to_uint32,json=intToUint32,proto3" json:"int_to_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IntToUint64     map[int64]uint64      `protobuf:"bytes,15,rep,name=int_to_uint64,json=intToUint64,proto3" json:"int_to_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IntToPlanetV1   map[int64]PlanetV1    `protobuf:"bytes,16,rep,name=int_to_planet_v1,json=intToPlanetV1,proto3" json:"int_to_planet_v1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=schema.proto3.PlanetV1"`
	IntToSimple     map[int64]*Simple     `protobuf:"bytes,17,rep,name=int_to_simple,json=intToSimple,proto3" json:"int_to_simple,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntToRepetitive map[int64]*Repetitive `protobuf:"bytes,18,rep,name=int_to_repetitive,json=intToRepetitive,proto3" json:"int_to_repetitive,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntToSingleton  map[int64]*Singleton  `protobuf:"bytes,19,rep,name=int_to_singleton,json=intToSingleton,proto3" json:"int_to_singleton,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IntMaps) Reset() {
	*x = IntMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_protos_schema_proto3_maps_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntMaps) ProtoMessage() {}

func (x *IntMaps) ProtoReflect() protoreflect.Message {
	mi := &file_test_protos_schema_proto3_maps_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntMaps.ProtoReflect.Descriptor instead.
func (*IntMaps) Descriptor() ([]byte, []int) {
	return file_test_protos_schema_proto3_maps_proto_rawDescGZIP(), []int{1}
}

func (x *IntMaps) GetIntToBool() map[int64]bool {
	if x != nil {
		return x.IntToBool
	}
	return nil
}

func (x *IntMaps) GetIntToBytes() map[int64][]byte {
	if x != nil {
		return x.IntToBytes
	}
	return nil
}

func (x *IntMaps) GetIntToDouble() map[int64]float64 {
	if x != nil {
		return x.IntToDouble
	}
	return nil
}

func (x *IntMaps) GetIntToFixed32() map[int64]uint32 {
	if x != nil {
		return x.IntToFixed32
	}
	return nil
}

func (x *IntMaps) GetIntToFixed64() map[int64]uint64 {
	if x != nil {
		return x.IntToFixed64
	}
	return nil
}

func (x *IntMaps) GetIntToFloat() map[int64]float32 {
	if x != nil {
		return x.IntToFloat
	}
	return nil
}

func (x *IntMaps) GetIntToInt32() map[int64]int32 {
	if x != nil {
		return x.IntToInt32
	}
	return nil
}

func (x *IntMaps) GetIntToInt64() map[int64]int64 {
	if x != nil {
		return x.IntToInt64
	}
	return nil
}

func (x *IntMaps) GetIntToSfixed32() map[int64]int32 {
	if x != nil {
		return x.IntToSfixed32
	}
	return nil
}

func (x *IntMaps) GetIntToSfixed64() map[int64]int64 {
	if x != nil {
		return x.IntToSfixed64
	}
	return nil
}

func (x *IntMaps) GetIntToSint32() map[int64]int32 {
	if x != nil {
		return x.IntToSint32
	}
	return nil
}

func (x *IntMaps) GetIntToSint64() map[int64]int64 {
	if x != nil {
		return x.IntToSint64
	}
	return nil
}

func (x *IntMaps) GetIntToString() map[int64]string {
	if x != nil {
		return x.IntToString
	}
	return nil
}

func (x *IntMaps) GetIntToUint32() map[int64]uint32 {
	if x != nil {
		return x.IntToUint32
	}
	return nil
}

func (x *IntMaps) GetIntToUint64() map[int64]uint64 {
	if x != nil {
		return x.IntToUint64
	}
	return nil
}

func (x *IntMaps) GetIntToPlanetV1() map[int64]PlanetV1 {
	if x != nil {
		return x.IntToPlanetV1
	}
	return nil
}

func (x *IntMaps) GetIntToSimple() map[int64]*Simple {
	if x != nil {
		return x.IntToSimple
	}
	return nil
}

func (x *IntMaps) GetIntToRepetitive() map[int64]*Repetitive {
	if x != nil {
		return x.IntToRepetitive
	}
	return nil
}

func (x *IntMaps) GetIntToSingleton() map[int64]*Singleton {
	if x != nil {
		return x.IntToSingleton
	}
	return nil
}

type StringMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringToBool       map[string]bool        `protobuf:"bytes,1,rep,name=string_to_bool,json=stringToBool,proto3" json:"string_to_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringToBytes      map[string][]byte      `protobuf:"bytes,2,rep,name=string_to_bytes,json=stringToBytes,proto3" json:"string_to_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToDouble     map[string]float64     `protobuf:"bytes,3,rep,name=string_to_double,json=stringToDouble,proto3" json:"string_to_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	StringToFixed32    map[string]uint32      `protobuf:"bytes,4,rep,name=string_to_fixed32,json=stringToFixed32,proto3" json:"string_to_fixed32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	StringToFixed64    map[string]uint64      `protobuf:"bytes,5,rep,name=string_to_fixed64,json=stringToFixed64,proto3" json:"string_to_fixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	StringToFloat      map[string]float32     `protobuf:"bytes,6,rep,name=string_to_float,json=stringToFloat,proto3" json:"string_to_float,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	StringToInt32      map[string]int32       `protobuf:"bytes,7,rep,name=string_to_int32,json=stringToInt32,proto3" json:"string_to_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringToInt64      map[string]int64       `protobuf:"bytes,8,rep,name=string_to_int64,json=stringToInt64,proto3" json:"string_to_int64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringToSfixed32   map[string]int32       `protobuf:"bytes,9,rep,name=string_to_sfixed32,json=stringToSfixed32,proto3" json:"string_to_sfixed32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	StringToSfixed64   map[string]int64       `protobuf:"bytes,10,rep,name=string_to_sfixed64,json=stringToSfixed64,proto3" json:"string_to_sfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	StringToSint32     map[string]int32       `protobuf:"bytes,11,rep,name=string_to_sint32,json=stringToSint32,proto3" json:"string_to_sint32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	StringToSint64     map[string]int64       `protobuf:"bytes,12,rep,name=string_to_sint64,json=stringToSint64,proto3" json:"string_to_sint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	StringToString     map[string]string      `protobuf:"bytes,13,rep,name=string_to_string,json=stringToString,proto3" json:"string_to_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToUint32     map[string]uint32      `protobuf:"bytes,14,rep,name=string_to_uint32,json=stringToUint32,proto3" json:"string_to_uint32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringToUint64     map[string]uint64      `protobuf:"bytes,15,rep,name=string_to_uint64,json=stringToUint64,proto3" json:"string_to_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringToPlanetV1   map[string]PlanetV1    `protobuf:"bytes,16,rep,name=string_to_planet_v1,json=stringToPlanetV1,proto3" json:"string_to_planet_v1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=schema.proto3.PlanetV1"`
	StringToSimple     map[string]*Simple     `protobuf:"bytes,17,rep,name=string_to_simple,json=stringToSimple,proto3" json:"string_to_simple,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToRepetitive map[string]*Repetitive `protobuf:"bytes,18,rep,name=string_to_repetitive,json=stringToRepetitive,proto3" json:"string_to_repetitive,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToSingleton  map[string]*Singleton  `protobuf:"bytes,19,rep,name=string_to_singleton,json=stringToSingleton,proto3" json:"string_to_singleton,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StringMaps) Reset() {
	*x = StringMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_protos_schema_proto3_maps_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMaps) ProtoMessage() {}

func (x *StringMaps) ProtoReflect() protoreflect.Message {
	mi := &file_test_protos_schema_proto3_maps_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMaps.ProtoReflect.Descriptor instead.
func (*StringMaps) Descriptor() ([]byte, []int) {
	return file_test_protos_schema_proto3_maps_proto_rawDescGZIP(), []int{2}
}

func (x *StringMaps) GetStringToBool() map[string]bool {
	if x != nil {
		return x.StringToBool
	}
	return nil
}

func (x *StringMaps) GetStringToBytes() map[string][]byte {
	if x != nil {
		return x.StringToBytes
	}
	return nil
}

func (x *StringMaps) GetStringToDouble() map[string]float64 {
	if x != nil {
		return x.StringToDouble
	}
	return nil
}

func (x *StringMaps) GetStringToFixed32() map[string]uint32 {
	if x != nil {
		return x.StringToFixed32
	}
	return nil
}

func (x *StringMaps) GetStringToFixed64() map[string]uint64 {
	if x != nil {
		return x.StringToFixed64
	}
	return nil
}

func (x *StringMaps) GetStringToFloat() map[string]float32 {
	if x != nil {
		return x.StringToFloat
	}
	return nil
}

func (x *StringMaps) GetStringToInt32() map[string]int32 {
	if x != nil {
		return x.StringToInt32
	}
	return nil
}

func (x *StringMaps) GetStringToInt64() map[string]int64 {
	if x != nil {
		return x.StringToInt64
	}
	return nil
}

func (x *StringMaps) GetStringToSfixed32() map[string]int32 {
	if x != nil {
		return x.StringToSfixed32
	}
	return nil
}

func (x *StringMaps) GetStringToSfixed64() map[string]int64 {
	if x != nil {
		return x.StringToSfixed64
	}
	return nil
}

func (x *StringMaps) GetStringToSint32() map[string]int32 {
	if x != nil {
		return x.StringToSint32
	}
	return nil
}

func (x *StringMaps) GetStringToSint64() map[string]int64 {
	if x != nil {
		return x.StringToSint64
	}
	return nil
}

func (x *StringMaps) GetStringToString() map[string]string {
	if x != nil {
		return x.StringToString
	}
	return nil
}

func (x *StringMaps) GetStringToUint32() map[string]uint32 {
	if x != nil {
		return x.StringToUint32
	}
	return nil
}

func (x *StringMaps) GetStringToUint64() map[string]uint64 {
	if x != nil {
		return x.StringToUint64
	}
	return nil
}

func (x *StringMaps) GetStringToPlanetV1() map[string]PlanetV1 {
	if x != nil {
		return x.StringToPlanetV1
	}
	return nil
}

func (x *StringMaps) GetStringToSimple() map[string]*Simple {
	if x != nil {
		return x.StringToSimple
	}
	return nil
}

func (x *StringMaps) GetStringToRepetitive() map[string]*Repetitive {
	if x != nil {
		return x.StringToRepetitive
	}
	return nil
}

func (x *StringMaps) GetStringToSingleton() map[string]*Singleton {
	if x != nil {
		return x.StringToSingleton
	}
	return nil
}

var File_test_protos_schema_proto3_maps_proto protoreflect.FileDescriptor

var file_test_protos_schema_proto3_maps_proto_rawDesc = []byte{
	0x0a, 0x24, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2f, 0x6d, 0x61, 0x70, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33, 0x1a, 0x26, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
	0x2f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x16, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4c,
	0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a,
	0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x52, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x55, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x55, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62,
	0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x4f, 0x0a,
	0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x4f,
	0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x4f, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x4f, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x4f, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x56, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x56, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c,
	0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x56, 0x31, 0x12, 0x4f, 0x0a, 0x0e, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x54, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62,
	0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x52, 0x65,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x42, 0x6f, 0x6f,
	0x6c, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5a, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x56, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x56, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a,
	0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x15, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x52,
	0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x14, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x8a, 0x16, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x12,
	0x45, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x4e, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x4e, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x48, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54,
	0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x51, 0x0a, 0x0f, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x51,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x4b,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x4b, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e,
	0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x52, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x56, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x56, 0x31, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x59, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x56, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x56, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a,
	0x10, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xaa, 0x18, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x12,
	0x51, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x5a, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x5a, 0x0a,
	0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x54, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5d, 0x0a, 0x12, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x5d, 0x0a, 0x12, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x57, 0x0a, 0x10, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x57, 0x0a,
	0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x31, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x56, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x56, 0x31, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x63, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x42, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x56, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x56, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x58, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x17, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a,
	0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_protos_schema_proto3_maps_proto_rawDescOnce sync.Once
	file_test_protos_schema_proto3_maps_proto_rawDescData = file_test_protos_schema_proto3_maps_proto_rawDesc
)

func file_test_protos_schema_proto3_maps_proto_rawDescGZIP() []byte {
	file_test_protos_schema_proto3_maps_proto_rawDescOnce.Do(func() {
		file_test_protos_schema_proto3_maps_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_protos_schema_proto3_maps_proto_rawDescData)
	})
	return file_test_protos_schema_proto3_maps_proto_rawDescData
}

var file_test_protos_schema_proto3_maps_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_test_protos_schema_proto3_maps_proto_goTypes = []interface{}{
	(*BoolMaps)(nil),   // 0: schema.proto3.BoolMaps
	(*IntMaps)(nil),    // 1: schema.proto3.IntMaps
	(*StringMaps)(nil), // 2: schema.proto3.StringMaps
	nil,                // 3: schema.proto3.BoolMaps.BoolToBoolEntry
	nil,                // 4: schema.proto3.BoolMaps.BoolToBytesEntry
	nil,                // 5: schema.proto3.BoolMaps.BoolToDoubleEntry
	nil,                // 6: schema.proto3.BoolMaps.BoolToFixed32Entry
	nil,                // 7: schema.proto3.BoolMaps.BoolToFixed64Entry
	nil,                // 8: schema.proto3.BoolMaps.BoolToFloatEntry
	nil,                // 9: schema.proto3.BoolMaps.BoolToInt32Entry
	nil,                // 10: schema.proto3.BoolMaps.BoolToInt64Entry
	nil,                // 11: schema.proto3.BoolMaps.BoolToSfixed32Entry
	nil,                // 12: schema.proto3.BoolMaps.BoolToSfixed64Entry
	nil,                // 13: schema.proto3.BoolMaps.BoolToSint32Entry
	nil,                // 14: schema.proto3.BoolMaps.BoolToSint64Entry
	nil,                // 15: schema.proto3.BoolMaps.BoolToStringEntry
	nil,                // 16: schema.proto3.BoolMaps.BoolToUint32Entry
	nil,                // 17: schema.proto3.BoolMaps.BoolToUint64Entry
	nil,                // 18: schema.proto3.BoolMaps.BoolToPlanetV1Entry
	nil,                // 19: schema.proto3.BoolMaps.BoolToSimpleEntry
	nil,                // 20: schema.proto3.BoolMaps.BoolToRepetitiveEntry
	nil,                // 21: schema.proto3.BoolMaps.BoolToSingletonEntry
	nil,                // 22: schema.proto3.IntMaps.IntToBoolEntry
	nil,                // 23: schema.proto3.IntMaps.IntToBytesEntry
	nil,                // 24: schema.proto3.IntMaps.IntToDoubleEntry
	nil,                // 25: schema.proto3.IntMaps.IntToFixed32Entry
	nil,                // 26: schema.proto3.IntMaps.IntToFixed64Entry
	nil,                // 27: schema.proto3.IntMaps.IntToFloatEntry
	nil,                // 28: schema.proto3.IntMaps.IntToInt32Entry
	nil,                // 29: schema.proto3.IntMaps.IntToInt64Entry
	nil,                // 30: schema.proto3.IntMaps.IntToSfixed32Entry
	nil,                // 31: schema.proto3.IntMaps.IntToSfixed64Entry
	nil,                // 32: schema.proto3.IntMaps.IntToSint32Entry
	nil,                // 33: schema.proto3.IntMaps.IntToSint64Entry
	nil,                // 34: schema.proto3.IntMaps.IntToStringEntry
	nil,                // 35: schema.proto3.IntMaps.IntToUint32Entry
	nil,                // 36: schema.proto3.IntMaps.IntToUint64Entry
	nil,                // 37: schema.proto3.IntMaps.IntToPlanetV1Entry
	nil,                // 38: schema.proto3.IntMaps.IntToSimpleEntry
	nil,                // 39: schema.proto3.IntMaps.IntToRepetitiveEntry
	nil,                // 40: schema.proto3.IntMaps.IntToSingletonEntry
	nil,                // 41: schema.proto3.StringMaps.StringToBoolEntry
	nil,                // 42: schema.proto3.StringMaps.StringToBytesEntry
	nil,                // 43: schema.proto3.StringMaps.StringToDoubleEntry
	nil,                // 44: schema.proto3.StringMaps.StringToFixed32Entry
	nil,                // 45: schema.proto3.StringMaps.StringToFixed64Entry
	nil,                // 46: schema.proto3.StringMaps.StringToFloatEntry
	nil,                // 47: schema.proto3.StringMaps.StringToInt32Entry
	nil,                // 48: schema.proto3.StringMaps.StringToInt64Entry
	nil,                // 49: schema.proto3.StringMaps.StringToSfixed32Entry
	nil,                // 50: schema.proto3.StringMaps.StringToSfixed64Entry
	nil,                // 51: schema.proto3.StringMaps.StringToSint32Entry
	nil,                // 52: schema.proto3.StringMaps.StringToSint64Entry
	nil,                // 53: schema.proto3.StringMaps.StringToStringEntry
	nil,                // 54: schema.proto3.StringMaps.StringToUint32Entry
	nil,                // 55: schema.proto3.StringMaps.StringToUint64Entry
	nil,                // 56: schema.proto3.StringMaps.StringToPlanetV1Entry
	nil,                // 57: schema.proto3.StringMaps.StringToSimpleEntry
	nil,                // 58: schema.proto3.StringMaps.StringToRepetitiveEntry
	nil,                // 59: schema.proto3.StringMaps.StringToSingletonEntry
	(PlanetV1)(0),      // 60: schema.proto3.PlanetV1
	(*Simple)(nil),     // 61: schema.proto3.Simple
	(*Repetitive)(nil), // 62: schema.proto3.Repetitive
	(*Singleton)(nil),  // 63: schema.proto3.Singleton
}
var file_test_protos_schema_proto3_maps_proto_depIdxs = []int32{
	3,  // 0: schema.proto3.BoolMaps.bool_to_bool:type_name -> schema.proto3.BoolMaps.BoolToBoolEntry
	4,  // 1: schema.proto3.BoolMaps.bool_to_bytes:type_name -> schema.proto3.BoolMaps.BoolToBytesEntry
	5,  // 2: schema.proto3.BoolMaps.bool_to_double:type_name -> schema.proto3.BoolMaps.BoolToDoubleEntry
	6,  // 3: schema.proto3.BoolMaps.bool_to_fixed32:type_name -> schema.proto3.BoolMaps.BoolToFixed32Entry
	7,  // 4: schema.proto3.BoolMaps.bool_to_fixed64:type_name -> schema.proto3.BoolMaps.BoolToFixed64Entry
	8,  // 5: schema.proto3.BoolMaps.bool_to_float:type_name -> schema.proto3.BoolMaps.BoolToFloatEntry
	9,  // 6: schema.proto3.BoolMaps.bool_to_int32:type_name -> schema.proto3.BoolMaps.BoolToInt32Entry
	10, // 7: schema.proto3.BoolMaps.bool_to_int64:type_name -> schema.proto3.BoolMaps.BoolToInt64Entry
	11, // 8: schema.proto3.BoolMaps.bool_to_sfixed32:type_name -> schema.proto3.BoolMaps.BoolToSfixed32Entry
	12, // 9: schema.proto3.BoolMaps.bool_to_sfixed64:type_name -> schema.proto3.BoolMaps.BoolToSfixed64Entry
	13, // 10: schema.proto3.BoolMaps.bool_to_sint32:type_name -> schema.proto3.BoolMaps.BoolToSint32Entry
	14, // 11: schema.proto3.BoolMaps.bool_to_sint64:type_name -> schema.proto3.BoolMaps.BoolToSint64Entry
	15, // 12: schema.proto3.BoolMaps.bool_to_string:type_name -> schema.proto3.BoolMaps.BoolToStringEntry
	16, // 13: schema.proto3.BoolMaps.bool_to_uint32:type_name -> schema.proto3.BoolMaps.BoolToUint32Entry
	17, // 14: schema.proto3.BoolMaps.bool_to_uint64:type_name -> schema.proto3.BoolMaps.BoolToUint64Entry
	18, // 15: schema.proto3.BoolMaps.bool_to_planet_v1:type_name -> schema.proto3.BoolMaps.BoolToPlanetV1Entry
	19, // 16: schema.proto3.BoolMaps.bool_to_simple:type_name -> schema.proto3.BoolMaps.BoolToSimpleEntry
	20, // 17: schema.proto3.BoolMaps.bool_to_repetitive:type_name -> schema.proto3.BoolMaps.BoolToRepetitiveEntry
	21, // 18: schema.proto3.BoolMaps.bool_to_singleton:type_name -> schema.proto3.BoolMaps.BoolToSingletonEntry
	22, // 19: schema.proto3.IntMaps.int_to_bool:type_name -> schema.proto3.IntMaps.IntToBoolEntry
	23, // 20: schema.proto3.IntMaps.int_to_bytes:type_name -> schema.proto3.IntMaps.IntToBytesEntry
	24, // 21: schema.proto3.IntMaps.int_to_double:type_name -> schema.proto3.IntMaps.IntToDoubleEntry
	25, // 22: schema.proto3.IntMaps.int_to_fixed32:type_name -> schema.proto3.IntMaps.IntToFixed32Entry
	26, // 23: schema.proto3.IntMaps.int_to_fixed64:type_name -> schema.proto3.IntMaps.IntToFixed64Entry
	27, // 24: schema.proto3.IntMaps.int_to_float:type_name -> schema.proto3.IntMaps.IntToFloatEntry
	28, // 25: schema.proto3.IntMaps.int_to_int32:type_name -> schema.proto3.IntMaps.IntToInt32Entry
	29, // 26: schema.proto3.IntMaps.int_to_int64:type_name -> schema.proto3.IntMaps.IntToInt64Entry
	30, // 27: schema.proto3.IntMaps.int_to_sfixed32:type_name -> schema.proto3.IntMaps.IntToSfixed32Entry
	31, // 28: schema.proto3.IntMaps.int_to_sfixed64:type_name -> schema.proto3.IntMaps.IntToSfixed64Entry
	32, // 29: schema.proto3.IntMaps.int_to_sint32:type_name -> schema.proto3.IntMaps.IntToSint32Entry
	33, // 30: schema.proto3.IntMaps.int_to_sint64:type_name -> schema.proto3.IntMaps.IntToSint64Entry
	34, // 31: schema.proto3.IntMaps.int_to_string:type_name -> schema.proto3.IntMaps.IntToStringEntry
	35, // 32: schema.proto3.IntMaps.int_to_uint32:type_name -> schema.proto3.IntMaps.IntToUint32Entry
	36, // 33: schema.proto3.IntMaps.int_to_uint64:type_name -> schema.proto3.IntMaps.IntToUint64Entry
	37, // 34: schema.proto3.IntMaps.int_to_planet_v1:type_name -> schema.proto3.IntMaps.IntToPlanetV1Entry
	38, // 35: schema.proto3.IntMaps.int_to_simple:type_name -> schema.proto3.IntMaps.IntToSimpleEntry
	39, // 36: schema.proto3.IntMaps.int_to_repetitive:type_name -> schema.proto3.IntMaps.IntToRepetitiveEntry
	40, // 37: schema.proto3.IntMaps.int_to_singleton:type_name -> schema.proto3.IntMaps.IntToSingletonEntry
	41, // 38: schema.proto3.StringMaps.string_to_bool:type_name -> schema.proto3.StringMaps.StringToBoolEntry
	42, // 39: schema.proto3.StringMaps.string_to_bytes:type_name -> schema.proto3.StringMaps.StringToBytesEntry
	43, // 40: schema.proto3.StringMaps.string_to_double:type_name -> schema.proto3.StringMaps.StringToDoubleEntry
	44, // 41: schema.proto3.StringMaps.string_to_fixed32:type_name -> schema.proto3.StringMaps.StringToFixed32Entry
	45, // 42: schema.proto3.StringMaps.string_to_fixed64:type_name -> schema.proto3.StringMaps.StringToFixed64Entry
	46, // 43: schema.proto3.StringMaps.string_to_float:type_name -> schema.proto3.StringMaps.StringToFloatEntry
	47, // 44: schema.proto3.StringMaps.string_to_int32:type_name -> schema.proto3.StringMaps.StringToInt32Entry
	48, // 45: schema.proto3.StringMaps.string_to_int64:type_name -> schema.proto3.StringMaps.StringToInt64Entry
	49, // 46: schema.proto3.StringMaps.string_to_sfixed32:type_name -> schema.proto3.StringMaps.StringToSfixed32Entry
	50, // 47: schema.proto3.StringMaps.string_to_sfixed64:type_name -> schema.proto3.StringMaps.StringToSfixed64Entry
	51, // 48: schema.proto3.StringMaps.string_to_sint32:type_name -> schema.proto3.StringMaps.StringToSint32Entry
	52, // 49: schema.proto3.StringMaps.string_to_sint64:type_name -> schema.proto3.StringMaps.StringToSint64Entry
	53, // 50: schema.proto3.StringMaps.string_to_string:type_name -> schema.proto3.StringMaps.StringToStringEntry
	54, // 51: schema.proto3.StringMaps.string_to_uint32:type_name -> schema.proto3.StringMaps.StringToUint32Entry
	55, // 52: schema.proto3.StringMaps.string_to_uint64:type_name -> schema.proto3.StringMaps.StringToUint64Entry
	56, // 53: schema.proto3.StringMaps.string_to_planet_v1:type_name -> schema.proto3.StringMaps.StringToPlanetV1Entry
	57, // 54: schema.proto3.StringMaps.string_to_simple:type_name -> schema.proto3.StringMaps.StringToSimpleEntry
	58, // 55: schema.proto3.StringMaps.string_to_repetitive:type_name -> schema.proto3.StringMaps.StringToRepetitiveEntry
	59, // 56: schema.proto3.StringMaps.string_to_singleton:type_name -> schema.proto3.StringMaps.StringToSingletonEntry
	60, // 57: schema.proto3.BoolMaps.BoolToPlanetV1Entry.value:type_name -> schema.proto3.PlanetV1
	61, // 58: schema.proto3.BoolMaps.BoolToSimpleEntry.value:type_name -> schema.proto3.Simple
	62, // 59: schema.proto3.BoolMaps.BoolToRepetitiveEntry.value:type_name -> schema.proto3.Repetitive
	63, // 60: schema.proto3.BoolMaps.BoolToSingletonEntry.value:type_name -> schema.proto3.Singleton
	60, // 61: schema.proto3.IntMaps.IntToPlanetV1Entry.value:type_name -> schema.proto3.PlanetV1
	61, // 62: schema.proto3.IntMaps.IntToSimpleEntry.value:type_name -> schema.proto3.Simple
	62, // 63: schema.proto3.IntMaps.IntToRepetitiveEntry.value:type_name -> schema.proto3.Repetitive
	63, // 64: schema.proto3.IntMaps.IntToSingletonEntry.value:type_name -> schema.proto3.Singleton
	60, // 65: schema.proto3.StringMaps.StringToPlanetV1Entry.value:type_name -> schema.proto3.PlanetV1
	61, // 66: schema.proto3.StringMaps.StringToSimpleEntry.value:type_name -> schema.proto3.Simple
	62, // 67: schema.proto3.StringMaps.StringToRepetitiveEntry.value:type_name -> schema.proto3.Repetitive
	63, // 68: schema.proto3.StringMaps.StringToSingletonEntry.value:type_name -> schema.proto3.Singleton
	69, // [69:69] is the sub-list for method output_type
	69, // [69:69] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_test_protos_schema_proto3_maps_proto_init() }
func file_test_protos_schema_proto3_maps_proto_init() {
	if File_test_protos_schema_proto3_maps_proto != nil {
		return
	}
	file_test_protos_schema_proto3_simple_proto_init()
	file_test_protos_schema_proto3_planets_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_test_protos_schema_proto3_maps_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_protos_schema_proto3_maps_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_protos_schema_proto3_maps_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_protos_schema_proto3_maps_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_protos_schema_proto3_maps_proto_goTypes,
		DependencyIndexes: file_test_protos_schema_proto3_maps_proto_depIdxs,
		MessageInfos:      file_test_protos_schema_proto3_maps_proto_msgTypes,
	}.Build()
	File_test_protos_schema_proto3_maps_proto = out.File
	file_test_protos_schema_proto3_maps_proto_rawDesc = nil
	file_test_protos_schema_proto3_maps_proto_goTypes = nil
	file_test_protos_schema_proto3_maps_proto_depIdxs = nil
}
